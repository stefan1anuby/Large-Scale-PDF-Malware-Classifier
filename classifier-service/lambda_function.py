import json
import urllib.parse

from hashlib import md5
from boto3 import client
from datetime import datetime
import onnxruntime as ort
import numpy as np
import os

import logging
#logging.basicConfig(level=logging.INFO,format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()
logger.setLevel("INFO")

logger.info("Imported libraries")

AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_SESSION_TOKEN = os.getenv("AWS_SESSION_TOKEN")

AWS_S3_BUCKET = os.getenv("AWS_S3_BUCKET")

s3Client = client('s3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            aws_session_token=AWS_SESSION_TOKEN)

#SA REZOLVI ACURATETEA (E O PROBLEMA LA KEYWORDS, nu se pupa prea bine features_list cu keywords si cu ce variabile a fost antrenat sau poate doar s-a scbhimbat confidenta la acest sample)

logger.info("Initialised boto3 clients")

keywords = [b'/OpenAction' , b'/AA', b'/Launch', b'/GoTo', b'/GoToR', b'/URI' , b'/RichMedia' , b'/Metadata' , b'/Contents' , b'/XFA' , b'/EmbeddedFiles' , b'/StructTreeRoot' ,b'/ObjStm' , b'/Sig' , b'/AcroForm' , b'/Names' , b'/XObject' , b'/O', b'/D', b'/F', b'/C' ,b'/GoToE']
ort_session = ort.InferenceSession("model//model.onnx")
features_list = []
with open("model//features_list.json", 'r') as f:
    features_list = json.load(f)

def predict_handler(input_dict):

    input = [input_dict.get(feature,0) for feature in features_list]
    input_np = np.array(input, dtype=np.float32).reshape(1, -1)
    
    # Perform inference
    outputs = ort_session.run(None, {'input': input_np})

    malware_confidence = outputs[0][0][0] # Accessing the first (and only) prediction
    predicted_label = int(malware_confidence > 0.5)
    prediction_confidence = (predicted_label * malware_confidence) + ((1 - predicted_label) * (1 - malware_confidence))
    
    response = {'predicted_label': predicted_label , 'prediction_confidence': prediction_confidence}
    return response

def get_features_from_PDF(content, keywords):
    
    JsCount = content.count(b'/JavaScript') + content.count(b'/JS')
    EncryptedCount = content.count(b'/Encrypt')

    features = {}
    features['MD5'] = md5(content).hexdigest()
    features.update({ keyword.decode("utf-8") : content.count(keyword) for keyword in keywords})
    features['hasJavaScript'] = 1 if JsCount != 0 else 0
    features['isEncrypted'] = 1 if EncryptedCount != 0 else 0
    
    return features

def lambda_handler(event, context):
    
    logger.info("Main function started")
    
    key = event['object_key']
    
    logger.info("Got bucket and key from event json")
    
    corrected_key = urllib.parse.unquote_plus(key)
    
    logger.info("Parsed key")
    
    response = s3Client.get_object(Bucket = AWS_S3_BUCKET , Key = corrected_key)
    
    logger.info("Got PDF object from bucket")
    
    file_content = response['Body'].read()
    metadata = response['Metadata']
    
    logger.info("Read content from PDF")

    parsed_pdf_dict = get_features_from_PDF(file_content , keywords)
    logger.info("Parsed the PDF : " + str(parsed_pdf_dict))
    
    prediction_response = predict_handler(parsed_pdf_dict)
    
    logging.info(prediction_response)
   
    return json.dumps(prediction_response)
    

"""
test_input = {
  "bucket_name": "my-pdf-storage-bucket",
  "object_key": "pdfs/test.pdf"
}

print(lambda_handler(test_input,None))
"""
