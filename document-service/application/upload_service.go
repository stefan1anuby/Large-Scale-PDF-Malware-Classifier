package application

import (
	"context"
	"document-service/domain"
	"time"

	log "github.com/sirupsen/logrus"
)

type UploadService struct {
	documentStorage domain.DocumentStorage
	//resultStorage domain.ResultStorage
	documentScanner domain.DocumentScanner
}

func NewUploadService(documentStorage domain.DocumentStorage , documentScanner domain.DocumentScanner/*resultStorage domain.ResultStorage*/) *UploadService {
	return &UploadService{
		documentStorage: documentStorage,
		//resultStorage: resultStorage,
		documentScanner: documentScanner,
	}
}

// HandleUpload manages the uploading of documents to S3 and any associated tasks
// such as updating caches or publishing messages.
func (u *UploadService) HandleUpload(ctx context.Context, doc *domain.Document) (*domain.Result, error) {
	handleUploadStart := time.Now() // Start timing the HandleUpload operation
	log.Info("UploadService.HandleUpload called")

	// Upload the document using the S3StorageService
	documentUploadStart := time.Now() // Start timing the document upload
	location, err := u.documentStorage.UploadDocument(doc); 
	if err != nil {
		log.WithError(err).Error("Error uploading document to S3")
		return nil, err
	}
	log.Infof("Document uploaded successfully in %v with location : %v ", time.Since(documentUploadStart) , location)

	// Optional Redis interaction could also be timed here
	/*
	redisPublishStart := time.Now() // Start timing Redis publish operation
	if err := u.redisService.PublishDocumentUploadedEvent(ctx, doc); err != nil {
	     log.WithError(err).Error("Error publishing document uploaded event to Redis")
	     return nil, err
	}
	log.Infof("Document uploaded event published to Redis in %v", time.Since(redisPublishStart))
	*/

	// Retrieving the scan result
	resultRetrievalStart := time.Now() // Start timing the result retrieval
	/*
	result, err := u.resultStorage.RetrieveResult(ctx, doc.ID.String())
	if err != nil {
		log.WithError(err).Error("Error retrieving scan result")
		return nil, err
	}
	*/
	result, err := u.documentScanner.Scan(doc, location)
	if err != nil {
		log.WithError(err).Error("Error scanning document")
		return nil, err
	}
	log.Infof("Scan result retrieved successfully in %v", time.Since(resultRetrievalStart))
	//TODO cred ca trebuie parsat 'result' si abia dupa returnat
	log.Infof("HandleUpload completed in %v", time.Since(handleUploadStart))
	return result, nil
}
