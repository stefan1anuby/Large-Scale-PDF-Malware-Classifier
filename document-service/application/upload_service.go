package application

import (
	"context"
	"document-service/domain"
	"time"

	log "github.com/sirupsen/logrus"
)

type UploadService struct {
	documentStorage domain.DocumentStorage
	//resultStorage domain.ResultStorage
	documentScanner domain.DocumentScanner
}

func NewUploadService(documentStorage domain.DocumentStorage , documentScanner domain.DocumentScanner/*resultStorage domain.ResultStorage*/) *UploadService {
	return &UploadService{
		documentStorage: documentStorage,
		//resultStorage: resultStorage,
		documentScanner: documentScanner,
	}
}

// HandleUpload manages the uploading of documents to Document Storage and Scanning them using Document Scanner
func (u *UploadService) HandleUpload(ctx context.Context, doc *domain.Document) (*domain.Result, error) {
	handleUploadStart := time.Now()
	funcCall := "UploadService.HandleUpload"

	log.WithFields(log.Fields{
		"docHash":  doc.Hash,
		"funcCall": funcCall,
	}).Info("Function started")

	documentUploadStart := time.Now()
	location, err := u.documentStorage.UploadDocument(doc)
	if err != nil {
		log.WithFields(log.Fields{
			"error":    err,
			"docHash":  doc.Hash,
			"funcCall": funcCall,
		}).Error("Error uploading document to S3")
		return nil, err
	}

	log.WithFields(log.Fields{
		"duration": time.Since(documentUploadStart),
		"docHash":  doc.Hash,
		"funcCall": funcCall,
	}).Info("Document uploaded successfully")

	resultRetrievalStart := time.Now() // Start timing the result retrieval
	result, err := u.documentScanner.Scan(doc, location)
	if err != nil {
		log.WithFields(log.Fields{
			"error":    err,
			"docHash":  doc.Hash,
			"funcCall": funcCall,
		}).Error("Error scanning document")
		return nil, err
	}

	log.WithFields(log.Fields{
		"duration": time.Since(resultRetrievalStart),
		"docHash":  doc.Hash,
		"funcCall": funcCall,
	}).Info("Scan result retrieved successfully")

	log.WithFields(log.Fields{
		"duration": time.Since(handleUploadStart),
		"docHash":  doc.Hash,
		"funcCall": funcCall,
	}).Infof("Function completed",)

	return result, nil
}