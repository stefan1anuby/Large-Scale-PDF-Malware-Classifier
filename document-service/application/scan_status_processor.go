package application

import (
	"context"
	"document-service/domain"
	"encoding/json"

	log "github.com/sirupsen/logrus"

	"github.com/google/uuid"
)

type ScanMessage struct {
	ScanID  uuid.UUID `json:"scan_id"`
	Result  domain.Result `json:"result"`
}

type ScanStatusProcessor struct {
	//redisService    *infrastructure.RedisService
	resultChannel domain.ReadResultChannel
	resultStorage domain.ResultStorage
}

func NewScanStatusProcessor(resultChannel domain.ReadResultChannel, resultStorage domain.ResultStorage) *ScanStatusProcessor {
	return &ScanStatusProcessor{
		resultChannel: resultChannel,
		resultStorage: resultStorage,
	}
}

func (mp *ScanStatusProcessor) StartProcessing(ctx context.Context) {
	processFunc := func(msg string) error {

		log.Info("Started processing a message !")

		var scanStatusMsg ScanMessage
		err := json.Unmarshal([]byte(msg), &scanStatusMsg)
		if err != nil {
			log.Error("Error parsing JSON message:", err)
			return err
		}

		err = mp.resultStorage.StoreResult(ctx, scanStatusMsg.ScanID.String(), scanStatusMsg.Result)
		if err != nil {
			log.Error("Error storing result:", err)
			return err
		}

		log.Infof("Stored result for scan_id: %s with value: %+v\n", scanStatusMsg.ScanID, scanStatusMsg.Result)
		return nil
	}

	if err := mp.resultChannel.ReadMessages(ctx, processFunc); err != nil {
		// Handle error, e.g., log or retry
		log.Errorf("Error reading messages: %v\n", err)
	}
}