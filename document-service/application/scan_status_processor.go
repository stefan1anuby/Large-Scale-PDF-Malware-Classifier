package application

import (
	"context"
	"document-service/domain"
	"document-service/infrastructure"
	"encoding/json"
	"fmt"

	"github.com/go-redis/redis/v8"
	"github.com/google/uuid"
)

type ScanMessage struct {
	ScanID  uuid.UUID `json:"scan_id"`
	Result  domain.Result `json:"result"`
}

type ScanStatusProcessor struct {
	redisService    *infrastructure.RedisService
	resultStorage domain.ResultStorage
}

func NewScanStatusProcessor(redisService *infrastructure.RedisService, resultStorage domain.ResultStorage) *ScanStatusProcessor {
	return &ScanStatusProcessor{
		redisService: redisService,
		resultStorage: resultStorage,
	}
}

func (mp *ScanStatusProcessor) StartProcessing(ctx context.Context, channel string) {
	processFunc := func(msg *redis.Message) {

		fmt.Println("Started processing a message !")

		var scanStatusMsg ScanMessage
		err := json.Unmarshal([]byte(msg.Payload), &scanStatusMsg)
		if err != nil {
			fmt.Println("Error parsing JSON message:", err)
			return
		}

		err = mp.resultStorage.StoreResult(ctx, scanStatusMsg.ScanID.String(), scanStatusMsg.Result)
		if err != nil {
			fmt.Println("Error storing result:", err)
			return
		}

		fmt.Printf("Stored result for scan_id: %s with value: %+v\n", scanStatusMsg.ScanID, scanStatusMsg.Result)
	}

	fmt.Println("Trying to subscribe to channel")
	mp.redisService.SubscribeAndProcess(ctx, channel, processFunc)
}