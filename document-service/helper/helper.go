package helper

import (
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
)

type UserServiceClient struct {
	adress		string
}

var (
	ErrUserServiceNotConnected = errors.New("coudn't make connection to the user service")

	ErrNoUserCreditsLeft =  errors.New("no user credits left to proceed")
	ErrUnknownError = errors.New("unknown error")
)

func NewUserServiceClient(adress string) (*UserServiceClient, error){
	//TODO add here health check and return error if service is dead or adress is wrong
	userServiceClient := &UserServiceClient{
		adress: adress,
	}
	result, err := userServiceClient.CheckHealthRequest()
	if err != nil {
		return userServiceClient, err
	} else if !result {
		return userServiceClient, ErrUserServiceNotConnected
	}

	return userServiceClient, nil
}


func (usc *UserServiceClient) CheckHealthRequest() (bool, error) {
	verb := "GET"
	url := usc.adress + "/health"

	statusCode, body, err := makeHTTPRequest(url, verb, "")
	if err != nil {
		log.Fatalf("Error making CheckHealth request: %v", err)
		return false, err
	}

	fmt.Printf("Status Code: %d\n", statusCode)
	fmt.Println("Response Body:", body)

	if statusCode == http.StatusOK {
		return true, nil
	}

	return false, ErrUnknownError
}

func (usc *UserServiceClient) CheckUserPermissionRequest(userAuthToken string) (bool, error) {
	return true, nil
}

func (usc *UserServiceClient) CheckUserCreditsRequest(userAuthToken string) (bool, error) {
	return true, nil
}

func (usc *UserServiceClient) ConsumeUserCreditsRequest(userAuthToken string) (bool, error) {
	url := usc.adress + "/consume-user-credits"
	verb := "POST"

	statusCode, body, err := makeHTTPRequest(url, verb, userAuthToken)
	if err != nil {
		log.Fatalf("Error making ConsumeUserCreditsRequest request: %v", err)
		return false, err
	}

	fmt.Printf("Status Code: %d\n", statusCode)
	fmt.Println("Response Body:", body)

	if statusCode == http.StatusOK {
		return true, nil
	} else if statusCode == http.StatusPaymentRequired {
		return false, ErrNoUserCreditsLeft
	}

	return false, ErrUnknownError

}

func makeHTTPRequest(url string, verb string, token string) (int, string, error){

	// Create a new request using http
	req, err := http.NewRequest(verb, url, nil)
	if err != nil {
		log.Fatalf("Error creating request: %v", err)
	}

	// Add the Authorization header to the request
	req.Header.Set("Authorization", token)

	// Create a new HTTP client and execute the request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatalf("Error sending request to API endpoint: %v", err)
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error reading response body: %v", err)
	}

	return resp.StatusCode, string(body), nil
}