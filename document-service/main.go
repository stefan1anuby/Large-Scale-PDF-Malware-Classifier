package main

import (
	"context"
	"document-service/application"
	"document-service/handler"
	"document-service/helper"
	"document-service/infrastructure"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"os"
	"strconv"

	"github.com/joho/godotenv"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	userServiceClient , err := helper.NewUserServiceClient(os.Getenv("USER_SERVICE_ADRESS"))
	if err != nil {
		log.Fatal("Error connecting to user service client")
	}

	serviceInstanceKey := os.Getenv("SERVICE_NAME") + strconv.Itoa(rand.Intn(100))
	
	redisService := infrastructure.NewRedisService()
	documentStorage := infrastructure.NewS3StorageService(serviceInstanceKey)
	resultStorage := infrastructure.NewJobResponsePool()
	uploadService := application.NewUploadService(documentStorage, resultStorage)
	
	updateScanStatusWorker := application.NewScanStatusProcessor(redisService, resultStorage)

	go updateScanStatusWorker.StartProcessing(context.Background(),serviceInstanceKey)
	
	http.HandleFunc("/upload", handler.HandlerUploadDoc(uploadService, userServiceClient))
	//TODO add HealthCheck endpoint
	fmt.Println("Server is starting on port " + os.Getenv("SERVICE_LISTEN_PORT"))
	http.ListenAndServe(":"+os.Getenv("SERVICE_LISTEN_PORT"), nil)
}