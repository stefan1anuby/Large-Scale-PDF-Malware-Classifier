package infrastructure

import (
	"document-service/domain"
	"document-service/helper"
	"encoding/json"
	"fmt"
	"os"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/lambda"
)

// LambdaInvoker encapsulates an AWS session and Lambda client
type LambdaScanner struct {
    lambdaClient *lambda.Lambda
	docTypeToLambdaFncName map[string]*string
}

type LambdaPayload struct {
    ObjectKey string `json:"object_key"`
}

// NewLambdaInvoker creates a new instance of LambdaInvoker
func NewLambdaScanner() *LambdaScanner {
    // Initialize a session
    sess, err := session.NewSession(&aws.Config{
		Region:      aws.String(os.Getenv("AWS_REGION")),
		Credentials: credentials.NewStaticCredentials(os.Getenv("AWS_CRED_ID"), os.Getenv("AWS_CRED_SECRET"), os.Getenv("AWS_CRED_TOKEN")),
	})
	if err != nil {
		fmt.Printf("Failed to create AWS session: %v\n", err)
		return nil
	}
    // Create a Lambda service client
    lambdaSvc := lambda.New(sess)

	docTypeToLambdaFncName := make(map[string]*string)
	
    docTypeToLambdaFncName["pdf"] = aws.String(os.Getenv("AWS_LAMBDA_PARSER_PDF_NAME"))

    return &LambdaScanner{
        lambdaClient: lambdaSvc,
		docTypeToLambdaFncName: docTypeToLambdaFncName,
    }
}

func (ls *LambdaScanner) Scan(doc *domain.Document, storageLocation string) (*domain.Result, error) {

	// get the lambda function for that file extension
	fileExtension, err := helper.GetFileExtension(doc.FileName)
	if err != nil {
		return nil, fmt.Errorf("error getting the extension for filename: '%s': %v", doc.FileName, err)
	}
	functionName,found := ls.docTypeToLambdaFncName[fileExtension]
	if !found {
		return nil, fmt.Errorf("error finding the lambda name for extension '%s': %v", fileExtension, err)
	}

	payload := LambdaPayload{
        ObjectKey: storageLocation,
    }

	payloadBytes, err := json.Marshal(payload)
    if err != nil {
        return nil, fmt.Errorf("error marshaling AWS LAMBDA payload to JSON: %v , error: %v ", payload, err)
    }

    // Define the input parameters for the Lambda function
    input := &lambda.InvokeInput{
        FunctionName:   functionName,
        Payload:        payloadBytes,
    }

    // Invoke the Lambda function
    result, err := ls.lambdaClient.Invoke(input)
    if err != nil {
        return nil, fmt.Errorf("error calling lambda function %v: %w", functionName, err)
    }

	var lambdaResult *domain.Result
    // Unmarshal the result.Payload into the lambdaResult struct
    if err := json.Unmarshal(result.Payload, &lambdaResult); err != nil {
        return nil, fmt.Errorf("error unmarshaling AWS LAMBDA function respone: %v , error: %v ", result.Payload, err)
    }

	return lambdaResult, nil
}