package infrastructure

import (
	"document-service/domain"
	"fmt"
	"os"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
)

type S3StorageService struct {
	uploader *s3manager.Uploader
	dirUpload string
	bucket   string
	//id 		 string
}

func NewS3StorageService() *S3StorageService {
	sess, err := session.NewSession(&aws.Config{
		Region:      aws.String(os.Getenv("AWS_REGION")),
		Credentials: credentials.NewStaticCredentials(os.Getenv("AWS_CRED_ID"), os.Getenv("AWS_CRED_SECRET"), os.Getenv("AWS_CRED_TOKEN")),
	})
	if err != nil {
		fmt.Printf("Failed to create AWS session: %v\n", err)
		return nil
	}

	return &S3StorageService{
		uploader: s3manager.NewUploader(sess),
		dirUpload: os.Getenv("AWS_S3_DIR_UPLOAD"),
		bucket:   os.Getenv("AWS_S3_BUCKET_NAME"),
		//id: id,
	}
}

func (s *S3StorageService) UploadDocument(doc *domain.Document) (string, error) {

	fmt.Println("Trying to upload to S3 !")

	metadata := make(map[string]*string)
	/*
    metadata["service-instance-key"] = aws.String(s.id)
	metadata["scan_id"] = aws.String(doc.ID.String())
	*/
	location := s.dirUpload + "/" + doc.Hash
	_, err := s.uploader.Upload(&s3manager.UploadInput{
		Bucket: aws.String(s.bucket),
		Key:    aws.String(location),
		Body:   doc.File,
		Metadata: metadata,
	})
	if err != nil {
		return "", fmt.Errorf("failed to upload file to S3: %w", err)
	}
	fmt.Println("Uploaded with success to S3 !")
	return location, nil
}