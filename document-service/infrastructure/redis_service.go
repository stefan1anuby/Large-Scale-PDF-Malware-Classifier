package infrastructure

import (
	"context"
	"fmt"
	"os"
	"strconv"

	"github.com/go-redis/redis/v8"
)

/*
THIS COULD BE ABSTRACTED ONE LEVEL UP
*/
type RedisService struct {
	client *redis.Client
}

func NewRedisService() *RedisService {
	db, err := strconv.Atoi(os.Getenv("REDIS_DB"))
	if err != nil {
		fmt.Printf("Invalid REDIS_DB value, defaulting to 0: %v\n", err)
		db = 0 // Defaulting to DB 0
	}

	client := redis.NewClient(&redis.Options{
		Addr:     os.Getenv("REDIS_ADDR"),
		Password: os.Getenv("REDIS_PASS"),
		DB:       db,
	})

	return &RedisService{
		client: client,
	}
}

// SubscribeAndProcess subscribes to a Redis channel and processes messages using the provided callback.
func (r *RedisService) SubscribeAndProcess(ctx context.Context, channel string, processMessage func(msg *redis.Message)) {
	pubsub := r.client.Subscribe(ctx, channel)
	defer pubsub.Close()

	ch := pubsub.Channel()

	for {
		select {
		case msg := <-ch:
			processMessage(msg)
		case <-ctx.Done():
			fmt.Println("Context cancelled, stopping subscription to channel:", channel)
			return
		}
	}
}