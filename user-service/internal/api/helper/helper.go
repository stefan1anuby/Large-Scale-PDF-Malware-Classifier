package helper

import (
	"errors"
	"regexp"
	"strings"
	"user-service/internal/domain/users"

	"github.com/gin-gonic/gin"

	"net/mail"
)

func GetUserFromContext(c *gin.Context) (*users.User, error){
	userInterface, exists := c.Get("user")
    if !exists {
        return nil, errors.New("no user key in context")
    }

    user, ok := userInterface.(*users.User)
    if !ok {
        return nil, errors.New("invalid user type")
    }

	return user,nil
}

func SanitizeString(str string) string {
    return strings.TrimSpace(str)
}

func IsEmailValid(email string) bool {

    sanitizedEmail := SanitizeString(email)
    _, err := mail.ParseAddress(sanitizedEmail)
    return err == nil
}

func IsPasswordValid(password string) bool {
    // Example: Minimum eight characters, at least one letter and one number
    sanitizedPassword := SanitizeString(password)
    /*
        TODO
        this doesnt work
    */
    passwordRegex := regexp.MustCompile(`^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$`)
    return passwordRegex.MatchString(sanitizedPassword)
}

func IsUsernameValid(username string) bool {
    // Example: Only alphanumeric characters, 3-20 characters long
    sanitizedUsername := SanitizeString(username)
    usernameRegex := regexp.MustCompile(`^[a-zA-Z0-9]{3,20}$`)
    return usernameRegex.MatchString(sanitizedUsername)
}