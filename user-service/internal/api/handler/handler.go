package handler

import (
	"log"
	"net/http"
	"user-service/internal/api/helper"
	"user-service/internal/service/auth"

	"github.com/gin-gonic/gin"
)

var (
	errInvalidUsername     = "Invalid username"
	errInvalidEmail        = "Invalid email address"
	errInvalidPassword     = "Invalid password"
	errBindingJSON         = "Error binding JSON"
	errFailedChangePass    = "Failed to change password"
	errFailedDeleteUser    = "Failed to delete user"
	errFailedCheckPerm     = "Failed to check permission"
	errInvalidCredentials  = "Invalid credentials"
	errInvalidUserID       = "Invalid user ID"
	errNotImplemented      = "NOT IMPLEMENTED"
    errConsumeUserCredit   = "Consuming credit failed"
    errGettingUserCredit   = "Getting user credit failed"
    errAddingUserCredit    = "Adding user credit failed"
    
)


func HandleHealthCheck(c *gin.Context) {
    log.Println("HandleHealthCheck called")
    c.JSON(http.StatusOK, gin.H{"status": "healthy"})
}

func HandleRegister(c *gin.Context, authService *auth.AuthService) {
	var registerDetails struct {
        Username 	string `json:"username"`
        Email 		string `json:"email"`
		Password 	string `json:"password"`
    }

    log.Println("HandleRegister called")

	if err := c.ShouldBindJSON(&registerDetails); err != nil {
		log.Printf("%s: %v", errBindingJSON, err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

    if !helper.IsUsernameValid(registerDetails.Username) {
        log.Printf("%s", errInvalidUsername)
        c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidUsername})
        return
    }
    if !helper.IsEmailValid(registerDetails.Email) {
        log.Printf("%s", errInvalidEmail)
        c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidEmail})
        return
    }
    if !helper.IsPasswordValid(registerDetails.Password) {
        log.Printf("%s", errInvalidPassword)
        c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidPassword})
        return
    }

    log.Println("Trying to register the user")
    credit := 0
	user, err := authService.Register(registerDetails.Username, registerDetails.Email, registerDetails.Password, credit)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

    log.Println("User registered successfully:", user.Username)
	c.JSON(http.StatusOK, gin.H{"user": user})
}

func HandleLogin(c *gin.Context, authService *auth.AuthService) {
    var loginDetails struct {
        Username string `json:"username"`
        Password string `json:"password"`
    }

    log.Println("HandleLogin called")

    if err := c.ShouldBindJSON(&loginDetails); err != nil {
        log.Printf("%s: %v", errBindingJSON, err)
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }

    if !helper.IsUsernameValid(loginDetails.Username) {
        log.Printf("%s", errInvalidUsername)
        c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidUsername})
        return
    }
    if !helper.IsPasswordValid(loginDetails.Password) {
        log.Printf("%s", errInvalidPassword)
        c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidPassword})
        return
    }

    log.Println("Trying to log in the user")

    token, err := authService.Login(loginDetails.Username, loginDetails.Password)
    if err != nil {
        c.JSON(http.StatusUnauthorized, gin.H{"error": errInvalidCredentials})
        return
    }

    log.Println("User logged successfully")
    c.JSON(http.StatusOK, gin.H{"token": token})
}


func HandlePasswordChange(c *gin.Context, authService *auth.AuthService) {

    log.Println("HandlePasswordChange called")
    
    var request struct {
        NewPassword string `json:"new_password"`
    }

    if err := c.ShouldBindJSON(&request); err != nil {
        log.Printf("Error binding JSON in HandlePasswordChange: %v", err)
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }

    if !helper.IsPasswordValid(request.NewPassword) {
        log.Println("Invalid password provided in HandlePasswordChange")
        c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidPassword})
        return
    }

    user, err := helper.GetUserFromContext(c)
    if err != nil {
        log.Printf("Failed to get user from context in HandlePasswordChange: %v", err)
        c.JSON(http.StatusInternalServerError, gin.H{"error": errFailedChangePass})
        return
    }
    log.Printf("User : %+v",user)
    newUser, err := authService.ChangePassword(user.ID, request.NewPassword)
    if err != nil {
        log.Printf("Error changing password in HandlePasswordChange: %v", err)
        c.JSON(http.StatusInternalServerError, gin.H{"error": errFailedChangePass})
        return
    }
    log.Printf("newUser : %+v",newUser)

    log.Println("Password changed successfully for user:", user.Username)

    c.JSON(http.StatusOK, gin.H{"status": "Password changed successfully"})
}

func HandleDeleteUser(c *gin.Context, authService *auth.AuthService) {

    /*
        TODO
        to be rewriten with helper.GetUserFromContext
    */
	token := c.GetHeader("Authorization")

	user, err := authService.ValidateToken(token)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": errFailedDeleteUser})
        return
	}

    err = authService.Delete(user.ID)
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": errFailedDeleteUser})
        return
    }

    c.JSON(http.StatusOK, gin.H{"status": "User deleted successfully"})
}

func HandleCheckPermission(c *gin.Context, authService *auth.AuthService) {
	/*
		TODO
		implement this
		or maybe move all the logic to the middleware
	*/

	/*
    userID, err := uuid.Parse(c.Param("id"))
    if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidUserID})
        return
    }
	
    permission := c.Query("permission")
	
    hasPermission, err := authService.CheckPermission(userID, permission)
    if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": errFailedCheckPerm})
        return
    }
	
    c.JSON(http.StatusOK, gin.H{"has_permission": hasPermission})
	*/
	c.JSON(http.StatusNotImplemented, gin.H{"error": errNotImplemented})
}

func HandleConsumeUserCredits(c *gin.Context, authService *auth.AuthService) {
	
    log.Println("HandleConsumeUserCredits called")
    user, err := helper.GetUserFromContext(c)
    if err != nil {
        log.Printf("Failed to get user from context : %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidUserID})
        return
    }

    log.Printf("User : %v", user)
	
    ok, err := authService.ConsumeUserCredit(user.ID)
    if err != nil {
        log.Printf("Failed to consume user credits from service: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": errConsumeUserCredit})
        return
    }
    log.Printf("Consume user credit result : %v", ok)
	
    c.JSON(http.StatusOK, gin.H{"status": ok})
}

func HandleGetUserCredits(c *gin.Context, authService *auth.AuthService) {
	
    log.Println("HandleGetUserCredits called")
    user, err := helper.GetUserFromContext(c)
    if err != nil {
        log.Printf("Failed to get user from context : %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidUserID})
        return
    }

    log.Printf("User : %v", user)
	
    credit, err := authService.GetUserCredit(user.ID)
    if err != nil {
        log.Printf("Failed to get user credits from service: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": errGettingUserCredit})
        return
    }

	log.Printf("User credit : %v", credit)
    c.JSON(http.StatusOK, gin.H{"credit": credit})
}

func HandleAddUserCredits(c *gin.Context, authService *auth.AuthService) {
	
    log.Println("HandleAddUserCredits called")

    var request struct {
        amount int `json:"amount"`
    }

    if err := c.ShouldBindJSON(&request); err != nil {
        log.Printf("Error binding JSON in HandleAddUserCredits: %v", err)
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }
    
    user, err := helper.GetUserFromContext(c)
    if err != nil {
        log.Printf("Failed to get user from context : %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": errInvalidUserID})
        return
    }
    log.Printf("User : %v", user)
	
    ok, err := authService.AddUserCredit(user.ID, request.amount)
    if err != nil {
        log.Printf("Failed to add user credits from service: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": errAddingUserCredit})
        return
    }
    log.Printf("Add user credit result : %v", ok)
	
    c.JSON(http.StatusOK, gin.H{"status" : ok})
}