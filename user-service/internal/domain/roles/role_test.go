package roles_test

import (
	"testing"

	"user-service/internal/domain/permissions"
	"user-service/internal/domain/roles"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
)

func TestAddPermission(t *testing.T) {
    role := roles.NewRole("Administrator", nil)
    permRead := permissions.NewPermission("Read", "Read permission")

    role.AddPermission(permRead)
    assert.Equal(t, 1, len(role.Permissions))
    assert.Equal(t, permRead.ID, role.Permissions[0].ID)

    // Test adding a duplicate permission (should not be added again)
    role.AddPermission(permRead)
    assert.Equal(t, 1, len(role.Permissions))
}

func TestRemovePermission(t *testing.T) {
    permRead := permissions.NewPermission("Read", "Read permission")
    permWrite := permissions.NewPermission("Write", "Write permission")
    role := roles.NewRole("Administrator", []permissions.Permission{permRead, permWrite})

    role.RemovePermission(permRead.ID)
    assert.Equal(t, 1, len(role.Permissions))
    assert.Equal(t, permWrite.ID, role.Permissions[0].ID)

    // Test removing a non-existent permission (should have no effect)
    nonExistentID := uuid.New()
    role.RemovePermission(nonExistentID)
    assert.Equal(t, 1, len(role.Permissions))
}

func TestHasPermission(t *testing.T) {
    permRead := permissions.NewPermission("Read", "Read permission")
    role := roles.NewRole("Administrator", []permissions.Permission{permRead})

    assert.True(t, role.HasPermission(permRead.ID))
    nonExistentID := uuid.New()
    assert.False(t, role.HasPermission(nonExistentID)) // Non-existent permission
}