package sql_test

import (
	"testing"
	"user-service/internal/domain/roles"
	"user-service/internal/domain/users"
	"user-service/internal/infrastructure/repositories/user/sql"

	"github.com/stretchr/testify/assert"
)


func newTestUser() *users.User{

	username := "username123"
	password := "password123"
	email := "user_email@gmail.com"
	roles := []roles.Role{}

	user, _ := users.NewUser(username, email, password, roles, 0)

	return user
}


func setupMockRepository() *sql.SQLUserRepository {
	connString := "postgres://postgres:Pass4Postgres1!@localhost:5432/Document-Scanner?sslmode=disable"
	repo, _ := sql.NewSQLUserRepository(connString)
	return repo
}

func TestDeleteAll(t *testing.T){
	repo := setupMockRepository()
	err := repo.DeleteAll()

	assert.NoError(t, err)

	users, err := repo.GetAll()
	assert.NoError(t, err)
	assert.Len(t, users, 0, "Should contain exactly 0 users")
}

func TestAdd(t *testing.T){
	repo := setupMockRepository()
	
	user := newTestUser()
	err := repo.Add(user)

	assert.NoError(t, err)

	users, err := repo.GetAll()

	assert.NoError(t, err)
	assert.Len(t, users, 1, "Should contain 1 user")
}

func TestFindByUsername(t *testing.T){
	repo := setupMockRepository()
	
	user := newTestUser()
	foundUser, err := repo.FindByUsername(user.Username)

	assert.NoError(t, err)
	assert.Equal(t, foundUser.Username, user.Username)
}

func TestFindByEmail(t *testing.T){
	repo := setupMockRepository()
	
	user := newTestUser()
	foundUser, err := repo.FindByEmail(user.Email)

	assert.NoError(t, err)
	assert.Equal(t, foundUser.Email, user.Email)
}

func TestUpdate(t *testing.T){
	repo := setupMockRepository()
	
	user := newTestUser()
	userToUpdate, err := repo.FindByUsername(user.Username)

	assert.NoError(t, err)

	userToUpdate.Username = "newtestusername123"
	
	err = repo.Update(userToUpdate)

	assert.NoError(t, err)
	
	userUpdated, err := repo.FindByUsername(userToUpdate.Username)

	assert.NoError(t, err)
	assert.Equal(t, userToUpdate.Username, userUpdated.Username)
}
