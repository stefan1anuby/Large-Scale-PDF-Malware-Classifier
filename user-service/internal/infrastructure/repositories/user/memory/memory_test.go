package memory_test

import (
	"user-service/internal/domain/users"

	"testing"
	"user-service/internal/infrastructure/repositories/user/memory"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
)

func setupRepositoryWithUsers() *memory.MemoryUserRepository {
    repo := memory.NewMemoryUserRepository()
	user1 := &users.User{ID: uuid.New(), Username: "user1"}
    user2 := &users.User{ID: uuid.New(), Username: "user2"}
    repo.Users[user1.ID] = *user1
    repo.Users[user2.ID] = *user2
    return repo
}

func TestGetAll(t *testing.T) {
    repo := setupRepositoryWithUsers()
    users, _ := repo.GetAll()

    assert.Len(t, users, 2, "Should contain exactly 2 users")
}

func TestFindByID(t *testing.T) {
    repo := setupRepositoryWithUsers()
    firstUserID := uuid.New() // Non-existent ID

    // Test for non-existent user
    _, err := repo.FindByID(firstUserID)
    assert.Error(t, err, "Should return an error for a non-existent user")

    // Test for existing user
    for _, u := range repo.Users {
        foundUser, err := repo.FindByID(u.ID)
        assert.NoError(t, err, "Should not return an error for an existing user")
        assert.Equal(t, u.ID, foundUser.ID, "The user ID should match")
    }
}

func TestFindByUsername(t *testing.T) {
    repo := setupRepositoryWithUsers()

    _, err := repo.FindByUsername("nonexistent")
    assert.Error(t, err, "Should return an error for a non-existent username")

    for _, u := range repo.Users {
        foundUser, err := repo.FindByUsername(u.Username)
        assert.NoError(t, err, "Should not return an error for an existing username")
        assert.Equal(t, u.Username, foundUser.Username, "The username should match")
    }
}

func TestAddUpdateDelete(t *testing.T) {
    repo := memory.NewMemoryUserRepository()
    newUser := &users.User{ID: uuid.New(), 
                            Username: "newUser", 
                            Email: "newEmail",
                            HashedPassword: "hashedPassword"}

    // Test Add
    assert.NoError(t, repo.Add(newUser), "Add should not return an error")
    assert.Contains(t, repo.Users, newUser.ID, "The new user should be added")

    // Test Update
    newUser.Username = "updatedUser"
    assert.NoError(t, repo.Update(newUser), "Update should not return an error")
    updatedUser, _ := repo.FindByID(newUser.ID)
    assert.Equal(t, "updatedUser", updatedUser.Username, "The username should be updated")

    // Test Delete
    assert.NoError(t, repo.Delete(newUser.ID), "Delete should not return an error")
    _, err := repo.FindByID(newUser.ID)
    assert.Error(t, err, "Should return an error for a deleted user")
}