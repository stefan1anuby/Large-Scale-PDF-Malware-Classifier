package memory

import (
	"sync"
	"user-service/internal/domain/users"

	"github.com/google/uuid"
)

type MemoryUserRepository struct {
	Users map[uuid.UUID]users.User
	sync.Mutex
}

func NewMemoryUserRepository() *MemoryUserRepository {
	return &MemoryUserRepository{
		Users: make(map[uuid.UUID]users.User),
	}
}

func (r *MemoryUserRepository) GetAll() []*users.User {
    r.Lock()
    defer r.Unlock()

    allUsers := make([]*users.User, 0, len(r.Users))
    for _, user := range r.Users {
        allUsers = append(allUsers, &user)
    }

    return allUsers
}

func (r *MemoryUserRepository) FindByID(id uuid.UUID) (*users.User, error) {
    r.Lock()
    defer r.Unlock()

    if user, exists := r.Users[id]; exists {
        return &user, nil
    }

    return nil, users.ErrUserNotFound
}

func (r *MemoryUserRepository) FindByUsername(username string) (*users.User, error) {
    r.Lock()
    defer r.Unlock()

    for _, user := range r.Users {
        if user.Username == username {
            return &user, nil
        }
    }

    return nil, users.ErrUserNotFound
}

func (r *MemoryUserRepository) FindByEmail(email string) (*users.User, error) {
    r.Lock()
    defer r.Unlock()

    for _, user := range r.Users {
        if user.Email == email {
            return &user, nil
        }
    }

    return nil, users.ErrUserNotFound
}

func (r *MemoryUserRepository) Add(user *users.User) error {
    r.Lock()
    defer r.Unlock()

    r.Users[user.ID] = *user
    return nil
}

func (r *MemoryUserRepository) Update(user *users.User) error {
    r.Lock()
    defer r.Unlock()

    if _, exists := r.Users[user.ID]; !exists {
        return users.ErrUserNotFound
    }

    r.Users[user.ID] = *user
    return nil
}

func (r *MemoryUserRepository) Delete(id uuid.UUID) error {
    r.Lock()
    defer r.Unlock()

    if _, exists := r.Users[id]; !exists {
        return users.ErrUserNotFound
    }

    delete(r.Users, id)
    return nil
}