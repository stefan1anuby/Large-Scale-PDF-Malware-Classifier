package auth_service_test

import (
	"strings"
	"testing"
	"time"
	"user-service/internal/domain/users"
	auth_service "user-service/internal/service"

	"github.com/dgrijalva/jwt-go"
	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
)

func setupAuthServiceWithUser() (*auth_service.AuthService, *users.User, error) {
	authService, err := auth_service.NewAuthService(auth_service.WithMemoryUserRepository())
	if err != nil {
		return nil, nil, err
	}

	username := "testuser"
	email := "test@test.com"
	password := "test123"
	newUser, err := authService.Register(username, email, password)
	if err != nil {
		return nil, nil, err
	}

	return authService, newUser, nil
}

func TestLogin(t *testing.T) {
    authService, user, err := setupAuthServiceWithUser()
    assert.NoError(t, err)

    // Test valid login
    token, err := authService.Login(user.Username, "test123")
    assert.NoError(t, err)
    assert.NotEmpty(t, token)

    // Test invalid login
    _, err = authService.Login(user.Username, "wrongpassword")
    assert.Error(t, err)
}

func TestChangePassword(t *testing.T) {
    authService, user, err := setupAuthServiceWithUser()
    assert.NoError(t, err)

    _, err = authService.ChangePassword(user.ID, "newpass123")
    assert.NoError(t, err)
}

func TestValidateToken(t *testing.T) {
    authService, user, err := setupAuthServiceWithUser()
    assert.NoError(t, err)

    // Create and validate a token
    expirationTime := time.Now().Add(30 * time.Minute)
    claims := &auth_service.Claims{
        UserID: user.ID.String(),
        StandardClaims: jwt.StandardClaims{
            ExpiresAt: expirationTime.Unix(),
        },
    }
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
    tokenString, _ := token.SignedString(auth_service.JwtKey)

    validatedUser, err := authService.ValidateToken(tokenString)
    assert.NoError(t, err)
    assert.NotNil(t, validatedUser)
    assert.Equal(t, user.ID, validatedUser.ID)
}

func TestValidateTokenWithAlteredPayload(t *testing.T) {
    authService, user, err := setupAuthServiceWithUser()
    assert.NoError(t, err)

    // Create a valid token first
    validToken, err := authService.Login(user.Username, "test123")
    assert.NoError(t, err)

    // Alter the token (e.g., change a character in the payload)
    parts := strings.Split(validToken, ".")
    if len(parts) == 3 {
        parts[1] = "tamperedPayload"
        invalidToken := strings.Join(parts, ".")

        _, err := authService.ValidateToken(invalidToken)
        assert.Error(t, err, "Should error on tampered token")
    } else {
        t.Error("Invalid token format")
    }
}

func TestValidateTokenWithInvalidSignature(t *testing.T) {
    authService, user, err := setupAuthServiceWithUser()
    assert.NoError(t, err)

    // Create a valid token first
    validToken, err := authService.Login(user.Username, "test123")
    assert.NoError(t, err)

    // Invalidate the signature
    parts := strings.Split(validToken, ".")
    if len(parts) == 3 {
        parts[2] = "invalidSignature"
        invalidToken := strings.Join(parts, ".")

        _, err := authService.ValidateToken(invalidToken)
        assert.Error(t, err, "Should error on token with invalid signature")
    } else {
        t.Error("Invalid token format")
    }
}

func TestValidateExpiredToken(t *testing.T) {
    authService, _, err := setupAuthServiceWithUser()
    assert.NoError(t, err)

    // Create an expired token
    expiredClaims := &auth_service.Claims{
        UserID: uuid.New().String(),
        StandardClaims: jwt.StandardClaims{
            ExpiresAt: time.Now().Add(-time.Hour).Unix(), // 1 hour in the past
        },
    }
    expiredToken := jwt.NewWithClaims(jwt.SigningMethodHS256, expiredClaims)
    tokenString, _ := expiredToken.SignedString(auth_service.JwtKey)

    _, err = authService.ValidateToken(tokenString)
    assert.Error(t, err, "Should error on expired token")
}